(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(calendar-latitude 37.6239587)
 '(calendar-longitude -122.0439688)
 '(cider-repl-pop-to-buffer-on-connect nil t)
 '(cider-test-show-report-on-success t t)
 '(js-indent-level 2)
 '(magit-branch-prefer-remote-upstream '("master" "develop"))
 '(magit-diff-arguments nil)
 '(org-jira-property-overrides '(("Work Hours" . "estimate")))
 '(package-selected-packages
   '(magit-delta xterm-color copilot quelpa-use-package quelpa editorconfig org-ai circleci-api posframe sqlite3 gnu-elpa-keyring-update auto-virtualenv dap-mode lsp-mode docker-tramp helm-lsp pyenv-mode-auto wgrep-helm lsp-java elpy protobuf-mode edit-indirect lsp-metals sbt-mode org-gcal org-jira ox-gfm htmlize ob-mermaid esup s3ed company-emoji emojify scala-mode ein robots-txt-mode lsp-ui company-lsp gist lsp-javacomp projectile git-link docker-compose-mode dockerfile-mode ob-shell ob-sh wanderlust groovy-mode apiwrap flycheck-elm elm-mode ox-confluence gitter ox-jira restart-emacs which-key fancy-battery spaceline delight yaml-mode use-package undo-tree super-save solarized-theme smartparens slack rainbow-identifiers rainbow-delimiters pyenv-mode py-autopep8 pushover pandoc org-journal nyan-mode n4js maxframe markdown-mode js2-refactor jade-mode idle-highlight-mode helm-projectile helm-pass helm-descbinds graphviz-dot-mode flycheck-pos-tip flycheck-clojure expand-region exec-path-from-shell es-mode ensime dot-mode docker diminish copy-as-format company-quickhelp company-jedi clj-refactor better-defaults auctex anzu ace-window))
 '(projectile-completion-system 'helm)
 '(projectile-switch-project-action 'projectile-vc)
 '(projectile-use-git-grep t)
 '(safe-local-variable-values
   '((projectile-project-run-cmd . "mvn -Pscala-2.12 -pl scala-common/common clean install -DskipTests")
     (projectile-project-run-cmd . "mvn -Pscala-2.12 -pl scala-common clean install -DskipTests")
     (projectile-project-install-cmd . "pip uninstall -y python-apxapi && pip install -e .")
     (projectile-project-test-cmd . "APX_VAULT_TOKEN=$($(pyenv which python) -c 'import apxapi; print(apxapi.session().get_vault_token())') mvn -pl nassembly clean test")
     (projectile-project-compile-cmd . "mvn -pl nassembly clean compile")
     (projectile-project-install-cmd . "mvn -pl nassembly clean install")
     (projectile-project-compile-cmd . "mvn -pl schemas clean compile")
     (projectile-project-install-cmd . "mvn -pl schemas clean install")
     (projectile-project-type quote python-toml)
     (projectile-project-install-cmd . "cd infostream_etl && pip install -e .")
     (projectile-project-test-cmd . "cd infostream_etl && tox")
     (projectile-project-test-cmd . "cd ~/infostream-etl && tox")
     (projectile-project-run-cmd . "APX_VAULT_TOKEN=$($(pyenv which python) -c 'import apxapi; print(apxapi.session().get_vault_token())') mvn -Pscala-2.12 -pl infostream -P runService clean generate-test-resources compile exec:exec &> log.log")
     (projectile-project-test-cmd . "APX_VAULT_TOKEN=$($(pyenv which python) -c 'import apxapi; print(apxapi.session().get_vault_token())') mvn clean test")
     (projectile-project-test-cmd . "APX_VAULT_TOKEN=$($(pyenv which python) -c 'import apxapi; print(apxapi.session().get_vault_token())') sbt -Dbcprovpath=/Users/$(whoami)/Downloads/bcprov-jdk15on-1.58.jar -Dbcfipspath=/Users/$(whoami)/Downloads/bc-fips-1.0.2.jar clean test")
     (projectile-project-run-cmd . "APX_VAULT_TOKEN=$($(pyenv which python) -c 'import apxapi; print(apxapi.session().get_vault_token())') sbt clean \"run server\" -Dbcprovpath=/Users/$(whoami)/Downloads/bcprov-jdk15on-1.58.jar -Dbcfipspath=/Users/$(whoami)/Downloads/bc-fips-1.0.2.jar -jvm-debug 5006 &> log.log")
     (projectile-project-run-cmd . "APX_VAULT_TOKEN=$($(pyenv which python) -c 'import apxapi; print(apxapi.session().get_vault_token())') sbt -Dbcprovpath=/Users/$(whoami)/Downloads/bcprov-jdk15on-1.58.jar -Dbcfipspath=/Users/$(whoami)/Downloads/bc-fips-1.0.2.jar clean \"run server application-dev.yaml\" -jvm-debug 5005 &> log.log")
     (projectile-project-run-cmd . "APX_VAULT_TOKEN=$($(pyenv which python) -c 'import apxapi; print(apxapi.session().get_vault_token())') sbt -Dbcprovpath=/Users/$(whoami)/Downloads/bcprov-jdk15on-1.58.jar -Dbcfipspath=/Users/$(whoami)/Downloads/bc-fips-1.0.2.jar clean test:run -jvm-debug 5005 &> log.log")
     (projectile-project-run-cmd . "spark-submit --master local[4] --driver-memory 4g --class com.apixio.sparkapps.ocr.OcrApp target/apx-spark-apps.jar")
     (projectile-project-test-cmd . "tox")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/scala-common_* ~/.ivy2/{cache,local}/apixio/scala-common_*; sbt clean publishM2")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/apixio-pipeline*; mvn clean -Dmaven.test.skip=true install")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/app-platform-bizlogic_* ~/.ivy2/cache/apixio/app-platform-bizlogic_*; sbt clean publishM2")
     (projectile-project-run-cmd . "sbt clean \"run server application-dev.yaml\" -jvm-debug 5005 &> log.log")
     (projectile-project-run-cmd . "sbt clean run -jvm-debug 5005 &> log.log")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/scala-common_* ~/.ivy2/cache/apixio/scala-common_*; sbt clean publishM2")
     (projectile-project-compilation-cmd . "LC_ALL=C java -cp ../../Downloads/bcpkix-jdk15on-1.47.jar:$(echo buildable/target/apixio-hadoop-jobs-*-SNAPSHOT.jar) com.apixio.ocr.OcrTest ~/Desktop/known_text/54263ca2-3d0d-4900-945b-d9294f94e147.pdf")
     (projectile-project-test-cmd . "mvn clean test")
     (projectile-project-run-cmd . "rm -rf ~/.m2/repository/apixio/apixio-hadoop-jobs; mvn -f buildable/pom.xml -U clean -Dmaven.test.skip=true package")
     (projectile-project-run-cmd . "sbt clean \"run server\" -jvm-debug 5005 &> log.log")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/apixio-hadoop-jobs; mvn -f buildable/pom.xml -U clean -Dmaven.test.skip=true package")
     (projectile-project-run-cmd . "LC_ALL=C java -cp ../../Downloads/bcpkix-jdk15on-1.47.jar:$(echo buildable/target/apixio-hadoop-jobs-*-SNAPSHOT.jar) com.apixio.ocr.OcrTest ~/Desktop/known_text/54263ca2-3d0d-4900-945b-d9294f94e147.pdf")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/apixio-hadoop-jobs; mvn -f buildable/pom.xml -U clean -Dmaven.test.skip=true deploy")
     (projectile-project-test-cmd . "mvn -T1C -U -f buildable/pom.xml clean test")
     (projectile-project-run-cmd . "sbt clean test:run -jvm-debug 5005 &> log.log")
     (projectile-project-run-cmd . "sbt clean \"run server src/test/resources/application.yaml\" -jvm-debug 5005 &> log.log")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/swagger-ui-resources; mvn clean -Dmaven.test.skip=true install")
     (projectile-project-test-cmd . "robot -d reports test_cases")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/scala-common_*; sbt clean publishM2")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/application-dropwizard-base_*; sbt clean publishM2")
     (projectile-project-compilation-cmd . "sbt \"release with-defaults\"")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/application-dropwizard-base_2.11; sbt clean publishM2")
     (projectile-project-compilation-cmd . "sbt clean rpm:publish")
     (projectile-project-compilation-cmd . "sbt clean rpm:deploy")
     (projectile-project-run-cmd . "sbt clean \"run server src/test/resources/application.yaml\"")
     (projectile-project-run-cmd . "mvn release:clean -Darguments=\"-DskipTests\" release:prepare < /dev/null")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/scala-common_2.11; sbt clean publishM2")
     (projectile-project-run-cmd . "sbt \"release with-defaults\"")
     (projectile-project-test-cmd . "sbt clean test")
     (projectile-project-run-cmd . "sbt clean \"run server application.yaml\"")
     (projectile-project-compilation-cmd . "rm -rf ~/.m2/repository/apixio/apixio-metrics*; mvn clean -Dmaven.test.skip=true install")
     (projectile-project-run-cmd . "mvn release:prepare")
     (projectile-project-run-cmd . "rm -rf ~/.m2/repository/apixio/scala-common_2.11; sbt clean publishM2")
     (projectile-project-run-cmd . "sbt clean publishM2")
     (projectile-project-run-cmd . "sbt clean \"run server application-dev.yaml\"")
     (projectile-project-run-cmd . "sbt clean publishLocal")
     (projectile-project-run-cmd . "sbt \"run server application.yaml\"")
     (projectile-project-run-cmd . "sbt \"run server application-dev.yaml\"")))
 '(sky-color-clock-enable-daytime-emoji t)
 '(sky-color-clock-enable-emoji-icon t)
 '(sky-color-clock-enable-xpm-icon t t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
